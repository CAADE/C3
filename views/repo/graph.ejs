<head>
  <title>Artifact Repo</title>

  <style>
    body {
      color: #d3d3d3;
      font: 12pt arial;
      background-color: #000000;
      margin: 0;
      height: 100%;
      overflow: hidden;
    }

    #mynetwork {
      width: 100%;
      height: 1000px;
      border: 1px solid #444444;
      background-color: #222222;
    }
  </style>
  <script type='text/javascript' src="/js/vis.js"></script>
  <script type='text/javascript' src="/js/dcvis.js"></script>
  <script type='text/javascript' src="/dependencies/sails.io.js"></script>
</head>

<body>
<table width="100%" height="1000px">
  <tr>
    <td height="90%"></td>
    <td width="220px"></td>
  </tr>
  <tr>
    <td>
      <div id="mynetwork">
        <div class="vis-network" tabindex="900"
             style="position: relative; overflow: hidden; touch-action: pan-y; user-select: none; -webkit-user-drag: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); width: 100%; height: 100%;">
          <canvas width="1000" height="1600"
                  style="position: relative; touch-action: none; user-select: none; -webkit-user-drag: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); width: 100%; height: 1000px;"></canvas>
        </div>
      </div>
    </td>
    <td valign="top" width="220px">
      <table id="events" width="210px">
        <tr>
          <td colspan="2"><h4>Events</h4></td>
        </tr>
      </table>

      <table id="policies" width="210px">
        <tr>
          <td colspan="2"><h4>Policies</h4></td>
        </tr>
      </table>
    </td>
  </tr>
  <tr>
    <td>
      <table>
        <tr>
          <td>Hardware</td>
          <td id="hardwareMetric">-</td>
          <td>Resources</td>
          <td id="resourceMetric">-</td>
          <td>Instances</td>
          <td id="instanceMetric">-</td>
          <td>Services</td>
          <td id="serviceMetric">-</td>
          <td>Apps</td>
          <td id="appMetric">-</td>
        </tr>
      </table>
    </td>
  </tr>
</table>

<a href="/dc/initialize">Reset Simulation</a>

<button onclick="removeHardware('compute');">Remove Compute</button>
<button onclick="addCompute();">Add Compute</button>
<button onclick="removeHardware('storage');">Remove Storage</button>
<button onclick="addStorage();">Add Storage</button>
<button onclick="changeLayout();">Change Layout</button>
<button onclick="addApp('Basic');">Basic Annotation</button>
<button onclick="addApp('Alert');">Alert System</button>
<button onclick="addApp('External');">External Application</button>
<button onclick="addApp('Analytics');">Analytics</button>
<button onclick="addApp('DeepLearning');">Deep Learning</button>
<button onclick="network.fit();">Zoom All</button>

<script type="text/javascript">
  //////////////////////////////////////////////
  // Initialize
  let container = document.getElementById('mynetwork');
  let options = {
    layout: {
      hierarchical: {
        enabled: true,
        sortMethod: 'directed'
      }
    },
    nodes: {
      shape: 'dot',
      size: 20,
      font: {
        size: 15,
        color: '#ffffff'
      },
      borderWidth: 2,
      level: 15
    },
    groups: {
      Stack: {
        color: {background: '#aa6622', border: '#aa6622'},
        shape: 'triangle',
        level: 5,
      },
      Stacklet: {
        color: {background: '#ff8844', border: '#ff8844'},
        shape: 'diamond',
        level: 6,
      },
      Servicelet: {
        shape: 'diamond',
        color: {background: '#ffaa88', border: '#ffaa88'},
        level: 8,
      },
      Application: {
        shape: 'hexagon',
        color: {background: '#004466', border: '#004466'},
        level: 9,
      },
      AppInstance: {
        shape: 'hexagon',
        color: {background: '#006688', border: '#006688'},
        level: 10,
      },
      Service: {
        shape: 'hexagon',
        color: {background: '#0088aa', border: '#0088aa'},
        level: 11,
      },
      ServiceInstance: {
        shape: 'hexagon',
        color: {background: '#00aacc', border: '#00aacc'},
        level: 12,
      },
      Image: {
        shape: 'square',
        color: {background: '#ffcc88', border: '#ffcc88'},
        level: 7,
        size: 10
      },
      rstorage: {
        shape: 'hexagon',
        color: {background: '#00cc66', border: '#00cc66'},
        level: 14,
      },
      compute: {
        shape: 'square',
        color: {background: '#006688', border: '#006688'},
        level: 13,
      },
      rcompute: {
        shape: 'square',
        color: {background: '#00ffaa', border: '#00ffaa'},
        level: 15
      },
      network: {
        shape: 'star',
        color: {background: '#004466', border: '#004466'},
        level: 15,
      },
      rnetwork: {
        shape: 'star',
        color: {background: '#00aa44', border: '#00aa44'},
        level: 16
      },
      cloud: {
        shape: 'cloud',
        color: {background: '#cccc00', border: '#cccc00'},
        level: 17
      }
    }
  };
  let dc = new DCVis(container, options);

  function addApp(app) {
    io.socket.get('/app/create?mode=json&name=' + app, function (body, response) {
    });
  }

  ///////////////////////
  // Environments
  function getEnv() {
    io.socket.get('/env/list?mode=json', function (body, response) {
      let items = [];
      for (let i in body) {
        let item = body[i];
        items.push({
          id: 'e' + item.id,
          label: item.name,
          group: 'environment',
          title: item.name
        });
      }
      dc.addNode(items);
      dc.drawEdges();
    });
  }

  ///////////////////////////////////////////////
  // RESOURCES
  function getResources() {
    io.socket.get('/resource/list?mode=json', function (body, response) {
      let items = [];
      let es = [];
      for (let i = 0; i < body.length; i++) {
        let obj = body[i];
        items.push({
          id: 'r' + obj.id,
          label: obj.name,
          group: 'r' + obj.type,
          title: obj.name + ' (' + obj.available + "/" + obj.capacity + ')'
        });
        for(let j in obj.instances) {
          let instance = obj.instances[j];
          dc.addEdge({from: 'si' + instance.id, to: 'r' + obj.id});
        }
      }
      dc.addNode(items);
      dc.drawEdges();
    });
    io.socket.on('resource', function (obj) {
      let item = {
        id: 'r' + obj.id,
        label: obj.name,
        group: 'r' + obj.type,
        title: obj.name + ' (' + obj.available + "/" + obj.capacity + ')'
      };
      dc.addNode([item]);
      dc.addEdge({to: 'h' + obj.hardware.id, from: 'r' + obj.id});
      dc.drawEdges();
      getMetrics();
    });
    io.socket.on('resource-move', function (obj) {
      // Select the hw and the resource.
      let rid = 'r' + obj.resource.id;
      let hid = 'h' + obj.to;
      let oid = 'h' + obj.from;
      removeEdge(rid, oid);
      let snodes = network.getSelectedNodes();
      snodes.push(rid);
      snodes.push(hid);
      network.selectNodes(snodes);

      // Add an edge between them.
      dc.addEdge({to: hid, from: rid});
      dc.drawEdges();
      getMetrics();
    });
    io.socket.on('resource-destroy', function (body) {
      for (let i = 0; i < body.length; i++) {
        removeNode('r' + body[i].id);
      }
      getMetrics();
    });
  }

  ///////////////////////////////////////////////
  // SERVICESSTACKS
  function getStacks() {
    io.socket.get('/stack/list?mode=json', function (body, response) {
      let items = [];
      let es = [];

      for (let i = 0; i < body.length; i++) {
        let app = body[i];
        let item = {
          id: 'a' + app.id,
          label: app.name,
          group: 'Stack',
          title: app.name + ' (' + app.stacklets.length + ')'
        };
        items.push(item);
        for (let j = 0; j < app.stacklets.length; j++) {
          let stacklet = app.stacklets[j];
          let item = {
            id: 's' + stacklet.id,
            label: stacklet.name,
            group: 'Stacklet',
            title: stacklet.name + '(' + stacklet.env + ')'
          };
          items.push(item);
          dc.addEdge({to: item.id, from: 'a' + app.id});
          if (stacklet.image) {
            let img = {
              id: 'i' + stacklet.id,
              label: stacklet.image,
              group: 'Image',
              title: stacklet.image
            };
            items.push(img);
            dc.addEdge({to: img.id, from: item.id});
          }
        }
      }
      dc.addNode(items);
      dc.drawEdges();
    });
    io.socket.on('stack', function (obj) {
    });
  }

  ///////////////////////////////////////////////
  // STACKLET
  function getStacklets() {
    io.socket.get('/stacklet/list?mode=json', function (body, response) {
      let items = [];
      let es = [];

      for (let i in body) {
        let stacklet = body[i];
        let item = {
          id: 's' + stacklet.id,
          label: stacklet.name,
          group: 'Stacklet',
          title: stacklet.name + ' (' + stacklet.env.name + ')'
        };
        items.push(item);
        for (let j in stacklet.servicelets) {
          let servicelet = stacklet.servicelets[j];
          let item = {
            id: 'l' + servicelet.id,
            label: servicelet.name,
            group: 'Servicelet',
            title: servicelet.name + ' (' + stacklet.replicas + ')'
          };
          items.push(item);
          dc.addEdge({to: item.id, from: 's' + stacklet.id});
          dc.addEdge({from: item.id, to: 'a' + servicelet.stack});
        }
      }
      dc.addNode(items);
      dc.drawEdges();
    });
    io.socket.on('stacklet', function (obj) {

    });
  }

  ///////////////////////////////////////////////
  // SERVICES
  function getServices() {
    io.socket.get('/service/list?mode=json', function (body, response) {
      let items = [];
      let es = [];

      for (let i in body) {
        let service = body[i];
        let item = {
          id: 'c' + service.id,
          label: service.name.split(/-/).pop(),
          group: 'Service',
          title: service.name + ' (' + service.replicas + ')',
        };
        items.push(item);
        dc.addEdge({from: 'c' + service.id, to: 'l' + service.servicelet.id});
        for (let j in service.children) {
          let item = {
            id: 'c' + service.id,
            label: service.name.split(/-/).pop(),
            group: 'Service',
            title: service.name + ' (' + service.replicas + ')',
          };
          items.push(item);
          let subs = service.children[j];
          dc.addEdge({to: 'c' + subs.id, from: 'c' + service.id});
        }
        for (let j in service.apps) {
          let appi = service.apps[j];
          dc.addEdge({from: 'ai' + appi.id, to: 'c' + service.id});
        }
        for (let j in service.instances) {
          let instance = service.instances[j];
          let item = {
            id: 'si' + instance.id,
            label: instance.name.split(/-/).pop(),
            group: 'ServiceInstance',
            title: instance.name
          };
          items.push(item);
          dc.addEdge({to: 'si' + instance.id, from: 'c' + service.id});
        }
      }
      dc.addNode(items);
      dc.drawEdges();
    });
    io.socket.on('stacklet', function (obj) {

    });
  }

  ///////////////////////////////////////////////
  // Applications
  function getApps() {
    io.socket.get('/app/list?mode=json', function (body, response) {
      let items = [];
      let es = [];

      for (let i in body) {
        let app = body[i];
        let item = {
          id: 'A' + app.id,
          label: app.name,
          group: 'Application',
          title: app.name,
        };
        items.push(item);
        dc.addEdge({from: item.id, to: 'a' + app.stack.id});

        for (let j in app.instances) {
          let instance = app.instances[j];
          let item = {
            id: 'ai' + instance.id,
            label: instance.name,
            group: 'AppInstance',
            title: instance.name + ' (' + instance.env + ')'
          };
          items.push(item);
          dc.addEdge({to: item.id, from: 'A' + app.id});
          dc.addEdge({from: item.id, to: 's' + instance.stacklet});
        }
      }
      dc.addNode(items);
      dc.drawEdges();
    });
    io.socket.on('stacklet', function (obj) {

    });
  }

  function init() {
    let currentPage = document.getElementsByClassName('current-page');
    currentPage[0].innerHTML = "Repository >> Show";
    getApps();
    getStacks();
    getStacklets();
    getServices();
    getResources();
  }

  init();
</script>
</body>
</html>

