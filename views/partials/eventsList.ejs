<table width="100%" border="0">
  <tr>
    <th>Name</th>
    <th>Value</th>
    <th>Policies</th>
  </tr>
  <% for(let i=0; i < events.length; i++) {
  let event = events[i];
  %>
  <tr class="row-<%- i % 2 %>" id="Event<%- event.id %>">
    <td align="center"><a href="/events/get?id=<%- event.id %>"><%= event.name %></a></td>
    <td align="center" id="EventsValue<%- event.id %>"><%= event.value %></td>
    <td alight="left" id="EventTriggers<%- event.id %>" style="line-height: 2">
      <%
      for(let j=0; j < event.triggers.length; j++) {
      let trigger = event.triggers[j];
      %>
      <span class="fired-<%- trigger.fired %>" id="Trigger<%- trigger.id %>" align="right"
            style="padding:5px;margin:5px;">
              <a href="/policy/get?id=<%= trigger.policy.id %>"><%- trigger.policy.name %></a>
            ( <%- trigger.condition.replace(/events.value/g, '<span class="Event-' + trigger.event.id + '">' + trigger.event.value + '</span>');  %> )
                  </span>
      <% } %>
    </td>
  </tr>
  <% } %>
</table>

<script>
  io.socket.on('policy', function (objs) {
    for (let i = 0; i < objs.length; i++) {
      let obj = objs[i];
      let instance = document.getElementById("Policy" + obj.id);
      if (instance) {
        let state = document.getElementById("PolicyState" + obj.id);
        let triggers = document.getElementById("PolicyTriggers" + obj.id);
        if (state) {
          state.className = "policy-" + obj.state;
          state.innerHTML = obj.state;
        }
        if (triggers) {
          let innerHTML = "";

          for (let j = 0; j < obj.triggers; j++) {
            let trigger = obj.triggers[j];
            innerHTML += '<span class="fired-' + trigger.fired + '" id="Trigger' + trigger.id + '" align="right" style="padding:5px;margin:5px;">';
            innerHTML += '<a href="/event/get?id=' + trigger.event.id + '">' + trigger.event.name + '</a> ( ' + trigger.condition.replace(/events.value/g, '<span class="Event-' + trigger.event.id + '">' + trigger.event.value + '</span>') + ' )</span>';
          }
        }
      }
      else { // Add an new Policy.
      }
    }
  });
  io.socket.on('triggered', function (obj) {
    let trigger = document.getElementById("Trigger" + obj.trigger.id);
    if (trigger) {
      trigger.className = "fired-" + obj.trigger.fired;
    }
    let policy = document.getElementById("Policy" + obj.policy.id);
    if (policy) {
      // policy.addClassName("Highlighted");

      // policy.removeClassName("Highlighted");
    }

  });
  io.socket.on('events', function (objs) {
    for (let i = 0; i < objs.length; i++) {
      let obj = objs[i];
      console.log(obj);
      let eventsValue = document.getElementById("EventsValue" + obj.id);

      if (eventsValue) {
        eventsValue.innerHTML = obj.value;
      }

      let events = document.getElementsByClassName("Event-" + obj.id);
      for (let j = 0; j < events.length; j++) {
        let event = events[j];
        event.innerHTML = obj.value;
      }
    }
  });

  io.socket.get('/policy/list?mode=json', function (objs, respone) {
  });

</script>
