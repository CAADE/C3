<script type='text/javascript' src="/js/dcvis.js"></script>
<script type='text/javascript' src="/dependencies/sails.io.js"></script>

<div id="mynetwork" style="height:<%= height %>px;background:white;">
  <div class="vis-network" tabindex="900"
       style="position: relative; overflow: hidden; touch-action: pan-y; user-select: none; -webkit-user-drag: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); width: 100%; height: 100%;">
    <canvas width="<%= width %>" height="<%= height %>"
            style="position: relative; touch-action: none; user-select: none; -webkit-user-drag: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); width: 100%; height: 1000px;"></canvas>
  </div>
</div>

<script type="text/javascript">
  //////////////////////////////////////////////
  // Initialize
  let container = document.getElementById('mynetwork');
  let states = {
    "Running": {background: '#00ff00', border: '#00aa00'},
    "Stopping": {background: '#ffff00', border: '#cccc00'},
    "Stopped": {background: '#bbbbbb', border: '#777777'},
    "Initializing": {background: '#00ffff', border: '#00cccc'},
    "Error": {background: '#ff0000', border: '#cc0000'},
    "Pause": {background: '#ffaa88', border: '#cc8866'},
    "Deploying": {background: '#00aaff', border: '#0088cc'}
  };
  let types = {
    "AppInstance": {shape: 'hexagon', /*level: 3*/},
    "Service": {shape: 'square', /*level: 4*/},
    "ServiceInstance": {shape: 'triangle', /*level: 5*/}
  };

  let groups = {
    "Application": {shape: 'circle', /* level:2, */ color: {background: "#cc00cc", border: "#880088"}},
    storage: { shape: 'hexagon', color: {background: '#0088aa', border: '#0088aa'}},
    rstorage: { shape: 'hexagon', color: {background: '#00cc66', border: '#00cc66'}},
    compute: { shape: 'square', color: {background: '#006688', border: '#006688'}},
    rcompute: { shape: 'square', color: {background: '#00ffaa', border: '#00ffaa'}},
    network: { shape: 'star', color: {background: '#004466', border: '#004466'}},
    rnetwork: { shape: 'star', color: {background: '#00aa44', border: '#00aa44'}},
    cloud: { shape: 'circle', color: {background: '#cccc00', border: '#cccc00'}},
    'Environment': { shape:'circle', color: {background: '#ff00ff', border: '#cc00cc'}}
  };
  for (let i in types) {
    for (let j in states) {
      let groupname = i + j;
      groups[groupname] = {};
      for (let k in types[i]) {
        groups[groupname][k] = types[i][k];
      }
      groups[groupname].color = {};
      for (let k in states[j]) {
        groups[groupname].color[k] = states[j][k];
      }
    }
  }
  let options = {
    layout: {
      hierarchical: {
        enabled: true,
        nodeSpacing: 70,
        treeSpacing: 200,
        sortMethod: 'directed'
      }
    },
    nodes: {
      shape: 'dot',
      size: 20,
      font: {
        size: 15,
        color: '#000000'
      },
      borderWidth: 2
    },
    groups: groups
  };
  let dc = new DCVis(container, options);
  let level =0;
  let services = [];

  function getServices(parent, service, items, level) {
    for (let i in service.children) {
      let child = service.children[i];
      let item = {
        id: 'c' + child.id,
        level: level,
        label: child.name.split(/-/).pop(),
        group: 'Service' + service.state,
        title: child.name + ' (' + child.replicas + ')' + '[' + child.state + ']' + child.message
      };
      items.push(item);
      dc.addEdge({to: item.id, from: parent.id});
      getServices(item, child, items, level);
    }

    for (let i in service.instances) {
      let instance = service.instances[i];
      let item = {
        id: 'si' + instance.id,
        label: instance.name.split(/-/).pop(),
        group: 'ServiceInstance' + instance.state,
        title: instance.name + '[' + instance.state + ']' + instance.message
      };

      if(!instance.resources) {
        console.error("Resource Not Found:", instance.name);
      }
      // Connect to Resource
      for(let j in instance.resources) {
        let resource = instance.resources[j];
        let ritem = {
          id: 'r' + resource.id,
          label: resource.name,
          group: 'r' + resource.type,
          title: resource.name + '(' + resource.available + '/' + resource.capacity + ')'
        };
        items.push(ritem);
        dc.addEdge({to: ritem.id, from: item.id});
        let hitem = {
          id: 'h' + resource.hardware.id,
          label: resource.hardware.name,
          group: resource.hardware.type,
          title: resource.hardware.name + '(' + resource.hardware.available + '/' + resource.hardware.capacity + ')'
        };
        items.push(hitem);
        dc.addEdge({to: hitem.id, from: ritem.id});
        let citem = {
          id: 'd' + resource.cloud.id,
          label: resource.cloud.name,
          group: 'cloud',
          title: resource.cloud.name
        };
        items.push(citem);
        dc.addEdge({to: citem.id, from: hitem.id});
        let eitem = {
          id: 'e' + resource.env.id,
          label: resource.env.name,
          group: 'Environment',
          title: resource.env.name
        };
        items.push(eitem);
        dc.addEdge({to: eitem.id, from: ritem.id});
      }
      items.push(item);
      dc.addEdge({to: item.id, from: parent.id});
    }
    return level + 1;
  }

  function calculateLevels(items, firstLevel) {
    // First count how many Instances there are.
    let instances = 0;
    let storage = 0;
    let compute = 0;
    let network = 0;
    for(let i in items) {
      let item = items[i];
      if(item.id.includes("si")) { instances++; }
      if(item.group === 'rstorage') { storage++; }
      if(item.group === 'rcompute') { compute++; }
      if(item.group === 'rnetwork') { network++; }
    }
    // Calcuate the number of layers to to have Instances in. No more than 100 per layer
    instances = Math.round(instances / 90);
    storage = Math.floor(storage / 90) + 1;
    compute = Math.floor(compute / 90) + 1;
    network = Math.floor(network / 90) + 1;
    let instanceLevel = firstLevel + 1;
    let computeLevel = instanceLevel + instances;
    let storageLevel = computeLevel + compute;
    let networkLevel = storageLevel + storage;

    let hardwareLevel = networkLevel + network + 1;
    let cloudLevel = hardwareLevel + 4;
    let envLevel = cloudLevel + 1;

    for(let i = 0; i < items.length; i++) {
      let item = items[i];
      if(item.id.includes("si")) { items[i].level = instanceLevel + i % instances; }
      if(item.group === 'rstorage') { items[i].level = storageLevel + i % storage; }
      if(item.group === 'rcompute') { items[i].level = computeLevel + i % compute; }
      if(item.group === 'rnetwork') { items[i].level = networkLevel + i % network; }
      if(item.group === 'compute') { items[i].level = hardwareLevel; }
      if(item.group === 'storage') { items[i].level = hardwareLevel + 1; }
      if(item.group === 'network') { items[i].level = hardwareLevel + 2; }
      if(item.group === 'cloud') { items[i].level = cloudLevel }
      if(item.group === 'Environment') { items[i].level = envLevel; }
    }

  }
  ///////////////////////////////////////////////
  // SERVICES
  function getInstances(query) {
    io.socket.get(query, function (body, response) {
      let items = [];
      let level = 2;
      let bottomLevel = 0;
      for (let i in body.instances) {
        let instance = body.instances[i];
        let item = {
          id: 'ai' + instance.id,
          label: instance.name,
          level: 1,
          group: 'AppInstance' + instance.state,
          title: instance.name + ' (' + instance.env + ')' + '[' + instance.state + ']' + instance.message
        };
        items.push(item);
        for (let j in instance.services) {
          let service = instance.services[j];
          let sitem = {
            id: 'c' + service.id,
            level: 2,
            label: service.name.split(/-/).pop(),
            group: 'Service' + service.state,
            title: service.name + ' (' + service.replicas + ')' + '[' + service.state + ']' + service.message
          };
          items.push(sitem);
          dc.addEdge({to: sitem.id, from: item.id});
          let newLevel = getServices(sitem, service, items, level+1);
          if(bottomLevel < newLevel) {
            bottomLevel = newLevel;
          }
        }
      }
      calculateLevels(items, bottomLevel);
      dc.addNode(items);
      dc.drawEdges();
    });

    io.socket.on('instance', function (objs) {
      console.log("Instance", objs);
      let items = [];
      for (let i = 0; i < objs.length; i++) {
        let obj = objs[i];
        let item = {
          id: 'ai' + obj.id,
          label: obj.name,
          group: 'AppInstance' + obj.state,
          title: obj.name + ' (' + obj.env + ')' + '[' + obj.state + ']' + obj.message
        };
        items.push(item);
      }
      dc.addNode(items);
    });
    io.socket.on('service', function (objs) {
      console.log("service:", objs);
      let items = [];
      for (let i = 0; i < objs.length; i++) {
        let obj = objs[i];
        let item = {
          id: 'c' + obj.id,
          label: obj.name.split(/-/).pop(),
          group: 'Service' + obj.state,
          title: obj.name + '[' + obj.state + ']' + obj.message
        };
        items.push(item);
        if (obj.parent) {
          dc.addEdge({to: item.id, from: 'c' + obj.parent.id});
        }
      }
      dc.addNode(items);
    });
    io.socket.on('sinstance', function (objs) {
      console.log("sinstance:", objs);
      let items = [];
      for (let i = 0; i < objs.length; i++) {
        let obj = objs[i];
        let item = {
          id: 'si' + obj.id,
          label: obj.name.split(/-/).pop(),
          group: 'ServiceInstance' + obj.state,
          title: obj.name + '[' + obj.state + ']' + obj.message
        };
        items.push(item);
        if (obj.service) {
          dc.addEdge({to: item.id, from: 'c' + obj.service.id});
        }
      }
      dc.addNode(items);
    });
  }

  function init() {
    getInstances("<%= query %>"); // comma Separated list of Instance IDs
  }

  function levelItems() {
    // Put Environment on the very last level
    // Put AppInstance at the very top level
    // Put

  }

  window.addEventListener("load", init());

</script>

