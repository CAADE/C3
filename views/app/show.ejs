<head>
  <style>
    body {
      color: #d3d3d3;
      font: 12pt arial;
      background-color: #000000;
      margin: 0;
      height: 100%;
      overflow: hidden;
    }

    #mynetwork {
      width: 100%;
      height: 1000px;
      border: 1px solid #444444;
      background-color: #222222;
    }
  </style>
  <script type='text/javascript' src="/js/vis.js"></script>
  <script type='text/javascript' src="/js/dcvis.js"></script>
  <script type='text/javascript' src="/dependencies/sails.io.js"></script>
</head>

<body>
<table width="100%" height="1000px">
  <tr>
    <td height="90%"></td>
    <td width="220px"></td>
  </tr>
  <tr>
    <td>
      <div id="mynetwork">
        <div class="vis-network" tabindex="900"
             style="position: relative; overflow: hidden; touch-action: pan-y; user-select: none; -webkit-user-drag: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); width: 100%; height: 100%;">
          <canvas width="1000" height="1600"
                  style="position: relative; touch-action: none; user-select: none; -webkit-user-drag: none; -webkit-tap-highlight-color: rgba(0, 0, 0, 0); width: 100%; height: 1000px;"></canvas>
        </div>
      </div>
    </td>
    <td valign="top" width="220px">
      <table id="events" width="210px">
        <tr>
          <td colspan="2"><h4>Events</h4></td>
        </tr>
      </table>

      <table id="policies" width="210px">
        <tr>
          <td colspan="2"><h4>Policies</h4></td>
        </tr>
      </table>
    </td>
  </tr>
  <tr>
    <td>
      <table>
        <tr>
          <td>Hardware</td>
          <td id="hardwareMetric">-</td>
          <td>Resources</td>
          <td id="resourceMetric">-</td>
          <td>Instances</td>
          <td id="instanceMetric">-</td>
          <td>Services</td>
          <td id="serviceMetric">-</td>
          <td>Apps</td>
          <td id="appMetric">-</td>
        </tr>
      </table>
    </td>
  </tr>
</table>

<a href="/dc/initialize">Reset Simulation</a>

<button onclick="removeHardware('compute');">Remove Compute</button>
<button onclick="addCompute();">Add Compute</button>
<button onclick="removeHardware('storage');">Remove Storage</button>
<button onclick="addStorage();">Add Storage</button>
<button onclick="changeLayout();">Change Layout</button>
<button onclick="addApp('Basic');">Basic Annotation</button>
<button onclick="addApp('Alert');">Alert System</button>
<button onclick="addApp('External');">External Application</button>
<button onclick="addApp('Analytics');">Analytics</button>
<button onclick="addApp('DeepLearning');">Deep Learning</button>
<button onclick="network.fit();">Zoom All</button>

<script type="text/javascript">
  //////////////////////////////////////////////
  // Initialize
  let container = document.getElementById('mynetwork');
  let states = {
    "Running": {background: '#00ff00', border: '#00aa00'},
    "Stopping": {background: '#ffff00', border: '#cccc00'},
    "Stopped": {background: '#bbbbbb', border: '#777777'},
    "Initializing": {background: '#00ffff', border: '#00cccc'},
    "Error": {background: '#ff0000', border: '#cc0000'},
    "Pause": {background: '#ffaa88', border: '#cc8866'},
    "Deploying": {background: '#00aaff', border: '#0088cc'}
  };
  let types = {
    "AppInstance": {shape: 'hexagon', /*level: 3*/},
    "Service": {shape: 'square', /*level: 4*/},
    "ServiceInstance": {shape: 'triangle', /*level: 5*/}
  };

  let groups = {
    "Application": {shape: 'circle', /* level:2, */ color: {background: "#cc00cc", border: "#880088"}}
  };
  for (let i in types) {
    for (let j in states) {
      let groupname = i + j;
      groups[groupname] = {};
      for (let k in types[i]) {
        groups[groupname][k] = types[i][k];
      }
      groups[groupname].color = {};
      for (let k in states[j]) {
        groups[groupname].color[k] = states[j][k];
      }
    }
  }
  let options = {
    layout: {
      hierarchical: {
        enabled: true,
        sortMethod: 'directed'
      }
    },
    nodes: {
      shape: 'dot',
      size: 20,
      font: {
        size: 15,
        color: '#ffffff'
      },
      borderWidth: 2,
      //level: 15
    },
    groups: groups
  };
  let dc = new DCVis(container, options);

  function addApp(app) {
    io.socket.get('/app/create?mode=json&name=' + app, function (body, response) {
    });
  }

  ///////////////////////////////////////////////
  // SERVICES
  function getServices() {
    io.socket.get('/service/list?mode=json', function (body, response) {
      let items = [];

      for (let i in body) {
        let service = body[i];
        let item = {
          id: 'c' + service.id,
          label: service.name.split(/-/).pop(),
          group: 'Service' + service.state,
          title: service.name + ' (' + service.replicas + ')' + '[' + service.state + ']' + service.message
        };
        items.push(item);
        for (let j in service.children) {
          let item = {
            id: 'c' + service.id,
            label: service.name.split(/-/).pop(),
            group: 'Service' + service.state,
            title: service.name + ' (' + service.replicas + ')' + '[' + service.state + ']' + service.message
          };
          items.push(item);
          let subs = service.children[j];
          dc.addEdge({to: 'c' + subs.id, from: 'c' + service.id});
        }
        for (let j in service.apps) {
          let appi = service.apps[j];
          dc.addEdge({from: 'ai' + appi.id, to: 'c' + service.id});
        }
        for (let j in service.instances) {
          let instance = service.instances[j];
          let item = {
            id: 'si' + instance.id,
            label: instance.name.split(/-/).pop(),
            group: 'ServiceInstance' + instance.state,
            title: instance.name + '[' + instance.state + ']' + instance.message
          };
          items.push(item);
          dc.addEdge({to: 'si' + instance.id, from: 'c' + service.id});
        }
      }
      dc.addNode(items);
      dc.drawEdges();
    });

    io.socket.on('service', function (obj) {
      let items = [];
      for (let i in obj) {
        let service = obj[i];
        let item = {
          id: 'c' + service.id,
          label: service.name.split(/-/).pop(),
          group: 'Service' + service.state,
          title: service.name + ' (' + service.replicas + ')' + '[' + service.state + ']' + service.message
        };
        items.push(item);
        for (let j in service.children) {
          let item = {
            id: 'c' + service.id,
            label: service.name.split(/-/).pop(),
            group: 'Service' + service.state,
            title: service.name + ' (' + service.replicas + ')' + '[' + service.state + ']' + service.message
          };
          items.push(item);
          let subs = service.children[j];
          dc.addEdge({to: 'c' + subs.id, from: 'c' + service.id});
        }
        for (let j in service.apps) {
          let appi = service.apps[j];
          dc.addEdge({from: 'ai' + appi.id, to: 'c' + service.id});
        }
        for (let j in service.instances) {
          let instance = service.instances[j];
          let item = {
            id: 'si' + instance.id,
            label: instance.name.split(/-/).pop(),
            group: 'ServiceInstance' + instance.state,
            title: instance.name + '[' + instance.state + ']' + instance.message
          };
          items.push(item);
          dc.addEdge({to: 'si' + instance.id, from: 'c' + service.id});
        }
      }
      dc.addNode(items);
      dc.drawEdges();
    });
    io.socket.on('instance', function (obj) {
      let items = [];
      for (let j in obj) {
        let instance = obj[j];
        let item = {
          id: 'si' + instance.id,
          label: instance.name.split(/-/).pop(),
          group: 'ServiceInstance' + instance.state,
          title: instance.name + '[' + instance.state + ']' + instance.message
        };
        items.push(item);
        dc.addEdge({to: 'si' + instance.id, from: 'c' + instance.service.id});
      }
      dc.addNode(items);
      dc.drawEdges();
    });
  }

  ///////////////////////////////////////////////
  // Applications
  function getApps() {
    io.socket.get('/app/list?mode=json', function (body, response) {
      let items = [];
      let es = [];

      for (let i in body) {
        let app = body[i];
        let item = {
          id: 'A' + app.id,
          label: app.name,
          group: 'Application',
          title: app.name,
        };
        items.push(item);

        for (let j in app.instances) {
          let instance = app.instances[j];
          let item = {
            id: 'ai' + instance.id,
            label: instance.name,
            group: 'AppInstance' + instance.state,
            title: instance.name + ' (' + instance.env + ')' + '[' + instance.state + ']' + instance.message
          };
          items.push(item);
          dc.addEdge({to: item.id, from: 'A' + app.id});
        }
      }
      dc.addNode(items);
      dc.drawEdges();
    });

    io.socket.on('app', function (obj) {
      let items = [];

      for (let i in obj) {
        let app = obj[i];
        let item = {
          id: 'A' + app.id,
          label: app.name,
          group: 'Application',
          title: app.name,
        };
        items.push(item);

        for (let j in app.instances) {
          let instance = app.instances[j];
          let item = {
            id: 'ai' + instance.id,
            label: instance.name,
            group: 'AppInstance' + instance.state,
            title: instance.name + ' (' + instance.env + ')' + '[' + instance.state + ']' + instance.message
          };
          items.push(item);
          dc.addEdge({to: item.id, from: 'A' + app.id});
        }
      }
      dc.addNode(items);
      dc.drawEdges();
    });
    io.socket.on('appInstance', function (obj) {
      let items = [];

      for (let j in obj) {
        let instance = obj[j];
        let item = {
          id: 'ai' + instance.id,
          label: instance.name,
          group: 'AppInstance' + instance.state,
          title: instance.name + ' (' + instance.env + ')' + '[' + instance.state + ']' + instance.message
        };
        items.push(item);
        dc.addEdge({to: item.id, from: 'A' + instance.app.id});
      }
      dc.addNode(items);
      dc.drawEdges();
    });
  }

  function init() {
    let currentPage = document.getElementsByClassName('current-page');
    currentPage[0].innerHTML = "App >> Show";
    getApps();
    getServices();
  }

  window.addEventListener("load", init());

</script>
</body>
</html>

